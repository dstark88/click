{"version":3,"sources":["components/Nav/Nav.js","components/PictureCard/PictureCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","message","score","fade","bestScore","PictureCard","onClick","handleImageClick","id","alt","name","src","image","Wrapper","children","Title","Footer","App","state","pictures","clone","_this","i","length","beenClicked","console","log","setState","j","sort","Math","random","_this2","this","components_Nav_Nav","Wrapper_Wrapper","components_Title_Title","map","picture","PictureCard_PictureCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0vCAceA,cAXH,SAAAC,GAAK,OACfC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,sBACtBJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMM,SAC/BL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA6BH,EAAAC,EAAAC,cAAA,YAAOH,EAAMO,MAAOP,EAAMQ,MAAvD,iBACeR,EAAMS,qBCKdC,MAXf,SAAqBV,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXO,QAAS,kBAAIX,EAAMY,iBAAiBZ,EAAMa,KAC1CC,IAAKd,EAAMe,KACXC,IAAKhB,EAAMiB,gBCFJC,MAJf,SAAiBlB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMmB,WCM1BC,SAPD,SAACpB,GAAD,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,yFCKWkB,SARA,SAAArB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,+CCwFOmB,6MAnFbC,MAAQ,CACNd,UAAW,EACXF,MAAO,EACPD,QAAS,2BACTkB,cAGFZ,iBAAmB,SAACC,GAGlB,IAFA,IAAIY,EAAOC,EAAKH,MAAMC,SAEbG,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,GAAIF,EAAME,GAAGd,KAAOA,EAAG,CACrB,IAA6B,IAAzBY,EAAME,GAAGE,YAAsB,CACjCC,QAAQC,IAAIJ,EAAG,oBACXD,EAAKH,MAAMhB,MAAQmB,EAAKH,MAAMd,WAChCiB,EAAKM,SAAS,CACZvB,UAAWiB,EAAKH,MAAMhB,MACtBiB,SAAUC,EACVnB,QAAS,gDAGb,IAAK,IAAI2B,EAAI,EAAGA,EAAIR,EAAMG,OAAQK,IAChCR,EAAMQ,GAAGJ,aAAc,EAEzBH,EAAKM,SAAS,CACZzB,MAAO,EACPiB,SAAUC,QAEP,CAML,GALAC,EAAKM,SAAS,CACZzB,MAAOmB,EAAKH,MAAMhB,MAAQ,EAC1BiB,SAAUC,EACVnB,QAAS,0CAEc,KAArBoB,EAAKH,MAAMhB,MAAc,CAC3BmB,EAAKM,SAAS,CACZvB,UAAW,GACXe,SAAUC,EACVnB,QAAQ,2CAEV,IAAK,IAAI2B,EAAI,EAAGA,EAAIR,EAAMG,OAAQK,IAChCR,EAAMQ,GAAGJ,aAAc,EAEzBH,EAAKM,SAAS,CACZzB,MAAO,EACPiB,SAAUC,IAGdA,EAAME,GAAGE,aAAc,EAEzB,MAGJJ,EAAQA,EAAMS,KAAK,kBAAMC,KAAKC,SAAW,8EAGlC,IAAAC,EAAAC,KACP,OACArC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,QAASgC,KAAKf,MAAMjB,QACpBC,MAAO+B,KAAKf,MAAMhB,MAClBE,UAAW6B,KAAKf,MAAMd,YAExBR,EAAAC,EAAAC,cAACqC,EAAD,KACAvC,EAAAC,EAAAC,cAACsC,EAAD,MACGH,KAAKf,MAAMC,SAASkB,IAAI,SAAAC,GAAO,OAC9B1C,EAAAC,EAAAC,cAACyC,EAAD,CACEC,IAAKF,EAAQ9B,GACbA,GAAI8B,EAAQ9B,GACZE,KAAM4B,EAAQ5B,KACdE,MAAO0B,EAAQ1B,MACfL,iBAAkByB,EAAKzB,sBAK/BX,EAAAC,EAAAC,cAAC2C,EAAD,cA/EYC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0ebac3e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nav.css\";\r\n\r\nconst Nav = props => (\r\n  <div>\r\n      <ul className=\"nav nav-justified\">\r\n        <li className=\"title\"><a href=\"/\">Nature Click Game</a></li>\r\n        <li className=\"message\">{props.message}</li>\r\n        <li className=\"score\">Score: <span>{props.score}{props.fade}</span> \r\n        | Best Score: {props.bestScore}</li>\r\n      </ul>\r\n  </div>\r\n);\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./picture.css\";\r\n\r\nfunction PictureCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n    <img className=\"imgContainer\"\r\n        onClick={()=>props.handleImageClick(props.id)} \r\n        alt={props.name} \r\n        src={props.image} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictureCard;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./wrapper.css\"\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./title.css\";\r\n\r\nconst Title = (props) => (\r\n  <div className=\"titleSection\">\r\n    <h1>Picture Click Game</h1>\r\n    <h3>Click on an image to earn points, but don't click on any more than once!</h3>    \r\n</div>\r\n);\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = props => (\r\n  <div>\r\n      <div className=\"footer\">\r\n        <h5> &copy;2018 Denise Stark</h5>\r\n      </div>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Nav from \"./components/Nav\";\r\nimport PictureCard from \"./components/PictureCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport Footer from \"./components/Footer/index\";\r\nimport pictures from \"./pictures.json\";\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    bestScore: 0,\r\n    score: 0,\r\n    message: \"Click an image to begin!\",\r\n    pictures,\r\n  }\r\n\r\n  handleImageClick = (id) => {\r\n    var clone =this.state.pictures\r\n\r\n    for (let i = 0; i < clone.length; i++) {\r\n      if (clone[i].id === id){\r\n        if (clone[i].beenClicked === true) {\r\n          console.log(i, \"index of clicked\");\r\n          if (this.state.score > this.state.bestScore) {\r\n            this.setState({\r\n              bestScore: this.state.score,\r\n              pictures: clone,\r\n              message: \"Sorry, you clicked incorrectly. Start Over!\",\r\n            });\r\n          }\r\n          for (let j = 0; j < clone.length; j++) {\r\n            clone[j].beenClicked = false;\r\n          }\r\n          this.setState({\r\n            score: 0,\r\n            pictures: clone\r\n          });\r\n        } else {\r\n          this.setState({\r\n            score: this.state.score + 1,\r\n            pictures: clone,\r\n            message: \"You clicked correctly. Keep clicking!\"\r\n          });\r\n          if (this.state.score === 11) {\r\n            this.setState({\r\n              bestScore: 12,\r\n              pictures: clone,\r\n              message:\"Wow! You are a master at memory games!\"\r\n            });\r\n            for (let j = 0; j < clone.length; j++) {\r\n              clone[j].beenClicked = false;\r\n            }\r\n            this.setState({\r\n              score: 0,\r\n              pictures: clone,\r\n            });\r\n          }\r\n          clone[i].beenClicked = true;\r\n        }\r\n        break;\r\n      } \r\n    }\r\n    clone = clone.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n        <Nav\r\n          message={this.state.message} \r\n          score={this.state.score}\r\n          bestScore={this.state.bestScore}\r\n        />\r\n        <Wrapper>\r\n        <Title></Title>\r\n          {this.state.pictures.map(picture => (\r\n            <PictureCard\r\n              key={picture.id}\r\n              id={picture.id}\r\n              name={picture.name}\r\n              image={picture.image}\r\n              handleImageClick={this.handleImageClick}\r\n            />\r\n            ))\r\n          }\r\n      </Wrapper>\r\n      <Footer />\r\n    </div>\r\n    )\r\n  };\r\n};\r\n\r\nexport default App;\r\n\r\n \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();"],"sourceRoot":""}